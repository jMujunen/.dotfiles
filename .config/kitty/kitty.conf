
font_family      JetBrains Mono 
bold_font        JetBrains Mono Bold
italic_font      JetBrains Mono Italic
bold_italic_font JetBrains Mono Bold Italic

font_size 10
# Performance
input_delay 0
repaint_delay 2
sync_to_monitor no
wayland_enable_ime no

# ^ Key Maps 
action_alias launch_tab launch --type=tab --cwd=current
# ? Custom kitten
map ctrl+k kitten testkitten.py

# ? Launch IPython
map ctrl+f2 launch_tab ipython
# ? New tab in cwd
map ctrl+t launch_tab

# ? Scroll to prompt
map ctrl+shift+z scroll_to_prompt -1
map ctrl+shift+x scroll_to_prompt 1

# ? F1 - 'less' style scroll back
map ctrl+f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

# ? Kitty Documentation
map ctrl+shift+f1 show_kitty_doc overview
# ?  Edit kitty.conf
map ctrl+shift+f2 "micro ~/.config/kitty/kitty.conf"
# ?  kitten shell
map ctrl+shift+escape kitty_shell window

map ctrl+n launch --location=neighbor

# ^ Url highlighting
# url_color #FF00FF
url_style curly
show_hyperlink_targets no
underline_hyperlinks always

# ^ Window config
remember_window_size  no
initial_window_width  960
initial_window_height 540

# ^ Window border
window_border_width 2pt
draw_minimal_borders no
# active_border_color #0079b5

# ^ Map the specified Unicode codepoints to a particular font
#  symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols
#  symbol_map codepoints Font Family Name

# ^ Cursor customization {{{
cursor_beam_thickness 0.5

# cursor #cccccc
# cursor_text_color #111111
# cursor_shape block
# cursor_underline_thickness 2.0
# cursor_blink_interval -1
# cursor_stop_blinking_after 15.0



# ^ Scrollback

scrollback_lines 5000

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
# wheel_scroll_multiplier 5.0
# wheel_scroll_min_lines 1

# ^ Mouse 

mouse_hide_wait -1.0
url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
detect_urls yes
show_hyperlink_targets yes
underline_hyperlinks always
copy_on_select no
select_by_word_characters @-./_~?&=%+#
click_interval -1.0
default_pointer_shape beam
pointer_shape_when_dragging beam



# ^ Terminal bell

enable_audio_bell none



# ^ Tab bar 

tab_bar_edge bottom

tab_bar_margin_width 0.0

tab_bar_margin_height 0.0 0.0
tab_bar_align left
tab_bar_min_tabs 2

tab_bar_style powerline
# fade slant separator powerline custom hidden
tab_powerline_style slanted
#: angled, slanted, round.


# tab_activity_symbol none
tab_title_template "{title.split("/")[0]}/{title.split("/")[1]}.../{title.split("/")[-1]} {fmt.bold}{tab.active_exe}{fmt.nobold}"

active_tab_title_template "{title.split("/")[0]}/{title.split("/")[1]}.../{title.split("/")[-1]} {fmt.bold}{fmt.fg._d1e2e4}{tab.active_exe}{fmt.fg.tab}{fmt.nobold}"

# BEGIN_KITTY_THEME
# Doom One
include current-theme.conf
# END_KITTY_THEME

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.


# ^ Color scheme 
# foreground #b7bab4
# background #2e3436
# background_blur 0

# selection_foreground #000000
# selection_background #fffacd

# ^ The color table 

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)


map ctrl+alt+a send_text all Special text
